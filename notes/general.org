#+TITLE: General NOTES on various computer/programming/Linux related topics

* Scripts
** Backup script
See https://help.ubuntu.com/lts/serverguide/backup-shellscripts.html 
for a useful guide on creating a backup script and how to automate it
with a cron job
** Export flashcards
I found a nice flash card project on GitHub. It has alot of good flashcards for general CS topics. I started creating my own database (See: [[file:~/Documents/git/computer-science-flash-cards/db/][flashcard db (probably won't exist unless on my Macbook Ubuntu distro)]]). It's nice to have a little tool like the one I got from GitHub to create flashcards, but there is no export option. Ok, well there sort of is. But for the most part you have to do it manually. The command that I use right now to export [the relevant info from the db] is 

#+BEGIN_SRC
sqlite3 -header -csv cards.db "select front, back from cards;" > cards.csv
#+END_SRC

Obviously, that is only if you are in the correct directory, but you get the idea. From there, I just take the file to some online tool to convert the questions/answers to actual flashcards that I can print.

The only limiting factor right now is that I can't include mathematical statements. It just gets all jumbled up when I open the file in Excel. I'm sure there's an easy way around that, but that's just something I'll have to figure out. In the future, I'd like to edit the GitHub tool to be able to do all of this for me automatically. I don't imagine it will be that hard.

*Note*: If you go to the readme for the original repo, you will see a script that somebody made to do this also (instead of manually typing in the sqlite3 command). I haven't checked it out yet, but it might be easier
*** For now, I can't reliably create flashcards from my db/csv file from any free online tool out there due to the limitation mentioned above. Another limitation is the formatting of any code. I will probably just end up tinkering around with the flashcard app to try to do it all from there. Most of the functionality is there, it just needs a nudge in the right direction...

* Cronjob
See https://askubuntu.com/questions/2368/how-do-i-set-up-a-cron-job
for a simple description of how to do cronjobs
* Commands
** touch
 Adds some file or dir to the current dir. As opposed to opening a new
 file with a program
** grep
 Use to search directory for a phrase. For example:
#+BEGIN_SRC
grep -rnw '/' -e 'word'
#+END_SRC
  
 searches the current directory recursively (-r), shows the line
 number in the file where the phrase is found (-n) which matches the
 whole word (-w)

 See
 https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux

** pwd
 Print the current directory

** uname -r
 (prints "2.6.22-14-generic" for example)

 Use to check the kernel version where,

 - 2 : Kernel version
 - 6 : The major revision of the kernel
 - 22 : The minor revision of the kernel
 - 14 : Immediate fixing / bug fixing for critical error
 - generic : Distribution specific sting. For example, Redhat appends
string such as EL5 to indicate RHEL 5 kernel.

** find
Use the following syntax to search for a file:
#+BEGIN_SRC
find /home/username/ -name "*.err"
#+END_SRC
* Directories
/bin
 In either the linux fs or the application context, bin is just short
 for binaries

 In the downloaded application context, /bin is where the application
 stores its binaries (duh).

 In the linux fs context, this is where most of the system application
 binaries reside. Not exactly sure on the difference between this dir
 and the /usr/bin dir. At this point it's not that important

 See this link for more
 https://unix.stackexchange.com/questions/5915/difference-between-bin-and-usr-bin

* Installation
** General
For the most part, if you are install from source, the general steps to take are as follows:

- ./configure
- make
- make install
** Reinstalling VM (or new Ubuntu/Linux OS)

1) Enable copy/paste between guest/host
   - Vmware - Just install the VMware Guest files (don't know the exact name)
   - Virtualbox - With the VM open, in the VM menu select Devices > Insert Guest Additions CD image...
     - Put in your sudo password and allow the system to install Guest Additions
     - Reboot
2) Install the necessary files/programs
   - Install emacs and git 
#+BEGIN_SRC
sudo apt install emacs git
#+END_SRC
     - Clone this repository
     - AFter cloning this repo, move all files from the folder 'emacs-setup-files/' to ~/.emacs.d/. There should be a init.el file and a custom/ directory with several .el files in it
   - iconsolata font 
#+BEGIN_SRC
sudo apt install fonts-inconsolata
#+END_SRC
   - emacs-goodies package 
#+BEGIN_SRC
sudo apt install emacs-goodies-el
#+END_SRC
